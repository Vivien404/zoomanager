swagger: "2.0"
info:
  description: "This is a sample server Zoomanager server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Zoomanager"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
schemes:
- "https"
- "http"
paths:
  /zoo:
    post:
      summary: "Add a new zoo to the store"
      description: ""
      operationId: "addZoo"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Zoo object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Zoo"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Successfully created"
    get:
      summary: "Update an existing zoo"
      description: ""
      operationId: "getAllZoo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Zoo"
  /zoo/{zooId}:
    get:
      summary: "Find zoo by ID"
      description: "Returns a single zoo"
      operationId: "getZooById"
      produces:
      - "application/json"
      parameters:
      - name: "zooId"
        in: "path"
        description: "ID of zoo to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Zoo"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Zoo not found"
    put:
      summary: "Updates a zoo in the store with form data"
      description: ""
      operationId: "updateZooWithForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "zooId"
        in: "path"
        description: "ID of zoo to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Zoo object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/Zoo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Zoo"
        405:
          description: "Invalid input"
    delete:
      summary: "Deletes a zoo"
      description: ""
      operationId: "deleteZoo"
      produces:
      - "application/json"
      parameters:
      - name: "zooId"
        in: "path"
        description: "Zoo id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Zoo not found"
    post:
      summary: "Add a new animal to the zoo"
      description: ""
      operationId: "addAnimal"
      consumes:
      - "application/json"
      parameters:
      - name: "zooId"
        in: "path"
        description: "ID of a zoo"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Animal object that needs to be added to the zoo"
        required: true
        schema:
          $ref: "#/definitions/Animal"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Successfully created"

  /zoo/{zooId}/animals:
    get:
      summary: "Returns animals in the given zoo"
      description: "Returns a map of status codes to quantities"
      operationId: "getAnimals"
      produces:
      - "application/json"
      parameters:
      - name: "zooId"
        in: "path"
        description: "ID of a zoo"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Animal"
  /zoo/{zooId}/animals/{animalId}:
    get:
      tags:
      - "animal"
      summary: "Returns a pet by id"
      description: ""
      operationId: "getAnimalById"
      produces:
      - "application/json"
      parameters:
      - name: "zooId"
        in: "path"
        description: "ID of a zoo"
        required: true
        type: "integer"
        format: "int64"
      - name: "animalId"
        in: "path"
        description: "ID of a zoo"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Animal"
        400:
          description: "Invalid animal"
    put:
      summary: "Updates a animal in the store with form data"
      description: ""
      operationId: "updateAnimalWithForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "animalId"
        in: "path"
        description: "ID of animal to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Zoo object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/Animal"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Animal"
        405:
          description: "Invalid input"
    delete:
      summary: "Deletes an animal"
      description: ""
      operationId: "deleteAnimal"
      produces:
      - "application/json"
      parameters:
      - name: "animalId"
        in: "path"
        description: "Animal id to delete"
        required: true
        type: "integer"
        format: "int64"
      - name: "zooId"
        in: "path"
        description: "Animal zoo to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Animal not found"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Animal:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      age:
        type: "integer"
        format: "int64"
      color:
        type: "string"
    xml:
      name: "Animal"

  Zoo:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      address:
        type: "string"
        example: "doggie"
      animal:
        type: "array"
        items:
          $ref: "#/definitions/Animal"
    xml:
      name: "Zoo"
